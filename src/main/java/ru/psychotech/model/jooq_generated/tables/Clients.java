/*
 * This file is generated by jOOQ.
 */
package jooq_generated.tables;


import java.util.Arrays;
import java.util.List;

import jooq_generated.Keys;
import jooq_generated.Public;
import jooq_generated.tables.records.ClientsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>public.clients</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Clients extends TableImpl<ClientsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.clients</code>
     */
    public static final Clients CLIENTS = new Clients();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientsRecord> getRecordType() {
        return ClientsRecord.class;
    }

    /**
     * The column <code>public.clients.id</code>.
     */
    public final TableField<ClientsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.clients.name</code>.
     */
    public final TableField<ClientsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.clients.lastname</code>.
     */
    public final TableField<ClientsRecord, String> LASTNAME = createField(DSL.name("lastname"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.clients.email</code>.
     */
    public final TableField<ClientsRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.clients.password</code>.
     */
    public final TableField<ClientsRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.clients.role</code>.
     */
    public final TableField<ClientsRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("'ROLE_USER'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.clients.gender</code>.
     */
    public final TableField<ClientsRecord, String> GENDER = createField(DSL.name("gender"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("'MALE'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.clients.deleted</code>.
     */
    public final TableField<ClientsRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private Clients(Name alias, Table<ClientsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Clients(Name alias, Table<ClientsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.clients</code> table reference
     */
    public Clients(String alias) {
        this(DSL.name(alias), CLIENTS);
    }

    /**
     * Create an aliased <code>public.clients</code> table reference
     */
    public Clients(Name alias) {
        this(alias, CLIENTS);
    }

    /**
     * Create a <code>public.clients</code> table reference
     */
    public Clients() {
        this(DSL.name("clients"), null);
    }

    public <O extends Record> Clients(Table<O> child, ForeignKey<O, ClientsRecord> key) {
        super(child, key, CLIENTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ClientsRecord, Long> getIdentity() {
        return (Identity<ClientsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ClientsRecord> getPrimaryKey() {
        return Keys.PK_USERS;
    }

    @Override
    public List<UniqueKey<ClientsRecord>> getKeys() {
        return Arrays.<UniqueKey<ClientsRecord>>asList(Keys.PK_USERS);
    }

    @Override
    public Clients as(String alias) {
        return new Clients(DSL.name(alias), this);
    }

    @Override
    public Clients as(Name alias) {
        return new Clients(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Clients rename(String name) {
        return new Clients(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Clients rename(Name name) {
        return new Clients(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, String, String, String, String, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
