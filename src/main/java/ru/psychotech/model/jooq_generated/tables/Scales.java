/*
 * This file is generated by jOOQ.
 */
package jooq_generated.tables;


import java.util.Arrays;
import java.util.List;

import jooq_generated.Keys;
import jooq_generated.Public;
import jooq_generated.tables.records.ScalesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>public.scales</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Scales extends TableImpl<ScalesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.scales</code>
     */
    public static final Scales SCALES = new Scales();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScalesRecord> getRecordType() {
        return ScalesRecord.class;
    }

    /**
     * The column <code>public.scales.id</code>.
     */
    public final TableField<ScalesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.scales.diagnostic_id</code>.
     */
    public final TableField<ScalesRecord, Long> DIAGNOSTIC_ID = createField(DSL.name("diagnostic_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.scales.name</code>.
     */
    public final TableField<ScalesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.scales.description</code>.
     */
    public final TableField<ScalesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.scales.detailed_description</code>.
     */
    public final TableField<ScalesRecord, String> DETAILED_DESCRIPTION = createField(DSL.name("detailed_description"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    private Scales(Name alias, Table<ScalesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Scales(Name alias, Table<ScalesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.scales</code> table reference
     */
    public Scales(String alias) {
        this(DSL.name(alias), SCALES);
    }

    /**
     * Create an aliased <code>public.scales</code> table reference
     */
    public Scales(Name alias) {
        this(alias, SCALES);
    }

    /**
     * Create a <code>public.scales</code> table reference
     */
    public Scales() {
        this(DSL.name("scales"), null);
    }

    public <O extends Record> Scales(Table<O> child, ForeignKey<O, ScalesRecord> key) {
        super(child, key, SCALES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ScalesRecord, Long> getIdentity() {
        return (Identity<ScalesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ScalesRecord> getPrimaryKey() {
        return Keys.PK_SCALES;
    }

    @Override
    public List<UniqueKey<ScalesRecord>> getKeys() {
        return Arrays.<UniqueKey<ScalesRecord>>asList(Keys.PK_SCALES);
    }

    @Override
    public List<ForeignKey<ScalesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ScalesRecord, ?>>asList(Keys.SCALES__SCALES_DIAGNOSTIC_ID_FKEY);
    }

    private transient Diagnostic _diagnostic;

    public Diagnostic diagnostic() {
        if (_diagnostic == null)
            _diagnostic = new Diagnostic(this, Keys.SCALES__SCALES_DIAGNOSTIC_ID_FKEY);

        return _diagnostic;
    }

    @Override
    public Scales as(String alias) {
        return new Scales(DSL.name(alias), this);
    }

    @Override
    public Scales as(Name alias) {
        return new Scales(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Scales rename(String name) {
        return new Scales(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Scales rename(Name name) {
        return new Scales(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
