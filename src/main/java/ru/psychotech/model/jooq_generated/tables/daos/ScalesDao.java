/*
 * This file is generated by jOOQ.
 */
package jooq_generated.tables.daos;


import java.util.List;

import jooq_generated.tables.Scales;
import jooq_generated.tables.records.ScalesRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * The table <code>public.scales</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScalesDao extends DAOImpl<ScalesRecord, jooq_generated.tables.pojos.Scales, Long> {

    /**
     * Create a new ScalesDao without any configuration
     */
    public ScalesDao() {
        super(Scales.SCALES, jooq_generated.tables.pojos.Scales.class);
    }

    /**
     * Create a new ScalesDao with an attached configuration
     */
    public ScalesDao(Configuration configuration) {
        super(Scales.SCALES, jooq_generated.tables.pojos.Scales.class, configuration);
    }

    @Override
    public Long getId(jooq_generated.tables.pojos.Scales object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<jooq_generated.tables.pojos.Scales> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Scales.SCALES.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<jooq_generated.tables.pojos.Scales> fetchById(Long... values) {
        return fetch(Scales.SCALES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public jooq_generated.tables.pojos.Scales fetchOneById(Long value) {
        return fetchOne(Scales.SCALES.ID, value);
    }

    /**
     * Fetch records that have <code>diagnostic_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<jooq_generated.tables.pojos.Scales> fetchRangeOfDiagnosticId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Scales.SCALES.DIAGNOSTIC_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>diagnostic_id IN (values)</code>
     */
    public List<jooq_generated.tables.pojos.Scales> fetchByDiagnosticId(Long... values) {
        return fetch(Scales.SCALES.DIAGNOSTIC_ID, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<jooq_generated.tables.pojos.Scales> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Scales.SCALES.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<jooq_generated.tables.pojos.Scales> fetchByName(String... values) {
        return fetch(Scales.SCALES.NAME, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<jooq_generated.tables.pojos.Scales> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Scales.SCALES.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<jooq_generated.tables.pojos.Scales> fetchByDescription(String... values) {
        return fetch(Scales.SCALES.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>detailed_description BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<jooq_generated.tables.pojos.Scales> fetchRangeOfDetailedDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Scales.SCALES.DETAILED_DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>detailed_description IN (values)</code>
     */
    public List<jooq_generated.tables.pojos.Scales> fetchByDetailedDescription(String... values) {
        return fetch(Scales.SCALES.DETAILED_DESCRIPTION, values);
    }
}
