/*
 * This file is generated by jOOQ.
 */
package jooq_generated.tables;


import java.util.Arrays;
import java.util.List;

import jooq_generated.Keys;
import jooq_generated.Public;
import jooq_generated.tables.records.ClientsSummaryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>public.clients_summary</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientsSummary extends TableImpl<ClientsSummaryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.clients_summary</code>
     */
    public static final ClientsSummary CLIENTS_SUMMARY = new ClientsSummary();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientsSummaryRecord> getRecordType() {
        return ClientsSummaryRecord.class;
    }

    /**
     * The column <code>public.clients_summary.client_id</code>.
     */
    public final TableField<ClientsSummaryRecord, Long> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.clients_summary.energy_level</code>.
     */
    public final TableField<ClientsSummaryRecord, Integer> ENERGY_LEVEL = createField(DSL.name("energy_level"), SQLDataType.INTEGER, this, "");

    private ClientsSummary(Name alias, Table<ClientsSummaryRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClientsSummary(Name alias, Table<ClientsSummaryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.clients_summary</code> table reference
     */
    public ClientsSummary(String alias) {
        this(DSL.name(alias), CLIENTS_SUMMARY);
    }

    /**
     * Create an aliased <code>public.clients_summary</code> table reference
     */
    public ClientsSummary(Name alias) {
        this(alias, CLIENTS_SUMMARY);
    }

    /**
     * Create a <code>public.clients_summary</code> table reference
     */
    public ClientsSummary() {
        this(DSL.name("clients_summary"), null);
    }

    public <O extends Record> ClientsSummary(Table<O> child, ForeignKey<O, ClientsSummaryRecord> key) {
        super(child, key, CLIENTS_SUMMARY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ClientsSummaryRecord> getPrimaryKey() {
        return Keys.PK_CLIENTS_SUMMARY;
    }

    @Override
    public List<UniqueKey<ClientsSummaryRecord>> getKeys() {
        return Arrays.<UniqueKey<ClientsSummaryRecord>>asList(Keys.PK_CLIENTS_SUMMARY);
    }

    @Override
    public List<ForeignKey<ClientsSummaryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ClientsSummaryRecord, ?>>asList(Keys.CLIENTS_SUMMARY__CLIENTS_SUMMARY_CLIENT_ID_FKEY);
    }

    private transient Clients _clients;

    public Clients clients() {
        if (_clients == null)
            _clients = new Clients(this, Keys.CLIENTS_SUMMARY__CLIENTS_SUMMARY_CLIENT_ID_FKEY);

        return _clients;
    }

    @Override
    public ClientsSummary as(String alias) {
        return new ClientsSummary(DSL.name(alias), this);
    }

    @Override
    public ClientsSummary as(Name alias) {
        return new ClientsSummary(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientsSummary rename(String name) {
        return new ClientsSummary(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientsSummary rename(Name name) {
        return new ClientsSummary(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
